from control import *

################################################################################################################################
## drive.script
################################################################################################################################
# external parameters (passed between the interface and the drive thread)
ur_cmd_time = 0
ur_cmd_id = 0
ur_cmd_kind = 0
ur_cmd_target = UR_ZERO
ur_cmd_max_speed = 0
ur_cmd_max_acceleration = 0
ur_cmd_force_low_bound = UR_DEFAULT_FORCE_LOW_BOUND
ur_cmd_force_high_bound = UR_DEFAULT_FORCE_HIGH_BOUND
ur_cmd_controller = UR_CMD_MOVE_CONTROLLER_DEFAULT
ur_cmd_controller_args = 0
# the computed internal state based on the last command
ur_last_state = [0, 0, 0, 0, 0, 0]

def ur_drive(time, id, kind, target, max_speed, max_acceleration, force_low_bound, force_high_bound, controller, controller_args):
    # the actual work is done on separate drive and motion threads, below
    enter_critical
    ur_cmd_time = time
    ur_cmd_id = id
    ur_cmd_kind = kind
    ur_cmd_target = target
    ur_cmd_max_speed = max_speed
    ur_cmd_max_acceleration = max_acceleration
    ur_cmd_force_low_bound = force_low_bound
    ur_cmd_force_high_bound = force_high_bound
    ur_cmd_controller = controller
    ur_cmd_controller_args = controller_args
    exit_critical
    return 0
end

def ur_get_status():
  return ur_last_state
end


################################################################################################################################
## Drive thread, CB2 version
################################################################################################################################
# internal parameters (passed between the drive thread and the the command thread)
ur_target_speed = UR_ZERO
ur_max_acc = 0

# On CB2 (v1.8), the call to speedj BLOCKS until the speed is reached AND the time elapsed.
# Thus, we simulate a 0.008ms timeout by running the speedj command from a separate thread
# and killing and restarting the thread on every time slice.
# Note that speedj is the only is trully interruptible ur script command (that is, it won't cause a jerky motion when the thread is killed).
# On CB2, this is the only thread allowed to call UR motion primitives (speedj)
thread ur_speed_command_thread_fn():
    # Set the joint speed together with max acceleration.
    # Note: a critical section is not needed, since the globals used here are only changed by the drive thread after killing this thread
    # Moreover, the speedj call needs to be the first instruction, otherwise the thread might be killed before the motion starts,
    # leading to "infinite loop detected" errors.
    # Adding a sync() call in the control thread would fix that, it would also make the control loop take 2 cycles instead of 1
    speedj(ur_target_speed, ur_max_acc, 0)
end

# The drive thread recomputes the target speed every cycle, while also checking forces from the FT sensor.
# To do this, it interrupts and restarts the motion on every cycle, by killing the command thread.
thread ur_cb2_drive_thread_fn():
    # run forever, checking forces and updating targets
    cmd_thread = run ur_speed_command_thread_fn()
    while True:
        kill cmd_thread
        enter_critical
        cmd_time = ur_cmd_time
        cmd_id = ur_cmd_id
        cmd_kind = ur_cmd_kind
        cmd_target = ur_cmd_target
        cmd_max_speed = ur_cmd_max_speed
        cmd_max_acceleration = ur_cmd_max_acceleration
        cmd_force_low_bound = ur_cmd_force_low_bound
        cmd_force_high_bound = ur_cmd_force_high_bound
        cmd_controller = ur_cmd_controller
        cmd_controller_args = ur_cmd_controller_args
        exit_critical

        res = ur_get_target_speed(  cmd_time,
                                    cmd_id,
                                    cmd_kind,
                                    cmd_target,
                                    cmd_max_speed,
                                    cmd_max_acceleration,
                                    cmd_force_low_bound,
                                    cmd_force_high_bound,
                                    cmd_controller,
                                    cmd_controller_args)
        enter_critical
        ur_target_speed = [res[0], res[1], res[2], res[3], res[4], res[5]]
        ur_max_acc = res[6]
        ur_last_state = [res[7], res[8], res[9], res[10], res[11], res[12]]
        exit_critical

        # Trigger the move, by starting and then killing the move thread. The move still executes for the current time step.
        # Note that the call below suspends the current thread (killing the motion thread yields the remaining time),
        # so this loop resumes only after 8ms
        cmd_thread = run ur_speed_command_thread_fn()
    end
end

################################################################################################################################
## Drive thread, CB3 and e-series version
################################################################################################################################
# On CB3 (>v3.1) and e-series (v5.x), the call to speedj returns once the specified time elapsed, even if the target speed was not reached.
# This is exactly what we need.
# On CB3 and e-series, this is the only thread allowed to call UR motion primitives (speedj)
thread ur_drive_thread_fn():
    textmsg("time slice: ", UR_TIME_SLICE)
    timeout = UR_TIME_SLICE * 0.95 # leave a little bit of time so we actually fit in the time quota and sync
    while True:
      enter_critical
      cmd_time = ur_cmd_time
      cmd_id = ur_cmd_id
      cmd_kind = ur_cmd_kind
      cmd_target = ur_cmd_target
      cmd_max_speed = ur_cmd_max_speed
      cmd_max_acceleration = ur_cmd_max_acceleration
      cmd_force_low_bound = ur_cmd_force_low_bound
      cmd_force_high_bound = ur_cmd_force_high_bound
      cmd_controller = ur_cmd_controller
      cmd_controller_args = ur_cmd_controller_args
      exit_critical

      res = ur_get_target_speed(  cmd_time,
                                  cmd_id,
                                  cmd_kind,
                                  cmd_target,
                                  cmd_max_speed,
                                  cmd_max_acceleration,
                                  cmd_force_low_bound,
                                  cmd_force_high_bound,
                                  cmd_controller,
                                  cmd_controller_args)
      target_speed = [res[0], res[1], res[2], res[3], res[4], res[5]]
      max_acc = res[6]
      speedj(target_speed, max_acc, timeout)
      ur_last_state = [res[7], res[8], res[9], res[10], res[11], res[12]]
      sync() # this sync in conjunction with the reduced timeout ( < UR_TIME_SLICE) prevents overshoot
    end
end

